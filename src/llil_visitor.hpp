#pragma once
#include "emulator.hpp"

ret_val visit_LLIL_SET_REG(Emulator* emu, const LowLevelILInstruction* instr);
ret_val visit_LLIL_SET_REG_SPLIT(Emulator* emu, const LowLevelILInstruction* instr);
ret_val visit_LLIL_SET_FLAG(Emulator* emu, const LowLevelILInstruction* instr);
ret_val visit_LLIL_LOAD(Emulator* emu, const LowLevelILInstruction* instr);
ret_val visit_LLIL_STORE(Emulator* emu, const LowLevelILInstruction* instr);
ret_val visit_LLIL_PUSH(Emulator* emu, const LowLevelILInstruction* instr);
ret_val visit_LLIL_POP(Emulator* emu, const LowLevelILInstruction* instr);
ret_val visit_LLIL_REG(Emulator* emu, const LowLevelILInstruction* instr);
ret_val visit_LLIL_REG_SPLIT(Emulator* emu, const LowLevelILInstruction* instr);
ret_val visit_LLIL_CONST(Emulator* emu, const LowLevelILInstruction* instr);
ret_val visit_LLIL_CONST_PTR(Emulator* emu, const LowLevelILInstruction* instr);
ret_val visit_LLIL_FLAG(Emulator* emu, const LowLevelILInstruction* instr);
ret_val visit_LLIL_ADD(Emulator* emu, const LowLevelILInstruction* instr);
ret_val visit_LLIL_SUB(Emulator* emu, const LowLevelILInstruction* instr);
ret_val visit_LLIL_SBB(Emulator* emu, const LowLevelILInstruction* instr);
ret_val visit_LLIL_AND(Emulator* emu, const LowLevelILInstruction* instr);
ret_val visit_LLIL_OR(Emulator* emu, const LowLevelILInstruction* instr);
ret_val visit_LLIL_XOR(Emulator* emu, const LowLevelILInstruction* instr);
ret_val visit_LLIL_LSL(Emulator* emu, const LowLevelILInstruction* instr);
ret_val visit_LLIL_LSR(Emulator* emu, const LowLevelILInstruction* instr);
ret_val visit_LLIL_ASR(Emulator* emu, const LowLevelILInstruction* instr);
ret_val visit_LLIL_MUL(Emulator* emu, const LowLevelILInstruction* instr);
ret_val visit_LLIL_DIVU_DP(Emulator* emu, const LowLevelILInstruction* instr);
ret_val visit_LLIL_DIVS_DP(Emulator* emu, const LowLevelILInstruction* instr);
ret_val visit_LLIL_MODU_DP(Emulator* emu, const LowLevelILInstruction* instr);
ret_val visit_LLIL_MODS_DP(Emulator* emu, const LowLevelILInstruction* instr);
ret_val visit_LLIL_NEG(Emulator* emu, const LowLevelILInstruction* instr);
ret_val visit_LLIL_SX(Emulator* emu, const LowLevelILInstruction* instr);
ret_val visit_LLIL_ZX(Emulator* emu, const LowLevelILInstruction* instr);
ret_val visit_LLIL_LOW_PART(Emulator* emu, const LowLevelILInstruction* instr);
ret_val visit_LLIL_JUMP(Emulator* emu, const LowLevelILInstruction* instr);
ret_val visit_LLIL_JUMP_TO(Emulator* emu, const LowLevelILInstruction* instr);
ret_val visit_LLIL_CALL(Emulator* emu, const LowLevelILInstruction* instr);
ret_val visit_LLIL_TAILCALL(Emulator* emu, const LowLevelILInstruction* instr);
ret_val visit_LLIL_RET(Emulator* emu, const LowLevelILInstruction* instr);
ret_val visit_LLIL_NORET(Emulator* emu, const LowLevelILInstruction* instr);
ret_val visit_LLIL_IF(Emulator* emu, const LowLevelILInstruction* instr);
ret_val visit_LLIL_GOTO(Emulator* emu, const LowLevelILInstruction* instr);
ret_val visit_LLIL_CMP_E(Emulator* emu, const LowLevelILInstruction* instr);
ret_val visit_LLIL_CMP_NE(Emulator* emu, const LowLevelILInstruction* instr);
ret_val visit_LLIL_CMP_SLT(Emulator* emu, const LowLevelILInstruction* instr);
ret_val visit_LLIL_CMP_ULT(Emulator* emu, const LowLevelILInstruction* instr);
ret_val visit_LLIL_CMP_SLE(Emulator* emu, const LowLevelILInstruction* instr);
ret_val visit_LLIL_CMP_ULE(Emulator* emu, const LowLevelILInstruction* instr);
ret_val visit_LLIL_CMP_SGE(Emulator* emu, const LowLevelILInstruction* instr);
ret_val visit_LLIL_CMP_UGE(Emulator* emu, const LowLevelILInstruction* instr);
ret_val visit_LLIL_CMP_SGT(Emulator* emu, const LowLevelILInstruction* instr);
ret_val visit_LLIL_CMP_UGT(Emulator* emu, const LowLevelILInstruction* instr);
ret_val visit_LLIL_TEST_BIT(Emulator* emu, const LowLevelILInstruction* instr);
ret_val visit_LLIL_INTRINSIC(Emulator* emu, const LowLevelILInstruction* instr);
ret_val visit_LLIL_UNDEF(Emulator* emu, const LowLevelILInstruction* instr);